
.. _program_listing_file_inc_ant_colony.hpp:

Program Listing for File ant_colony.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_inc_ant_colony.hpp>` (``inc/ant_colony.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef ANT_COLONY_H
   #define ANT_COLONY_H
   
   #include "utils.hpp"
   
   struct pair_hash
   {
       template <class T1, class T2>
       std::size_t operator() (const std::pair<T1, T2> &pair) const
       {
           return std::hash<T1>()(pair.first) ^ std::hash<T2>()(pair.second);
       }
   };
   
   class Ant{
   public:
     Ant(Node start = Node(0,0), int id = 0);
   private:
       bool found_goal_ = false;
       int steps_ = 0, id_;
       std::vector<Node> path_;
       Node previous_node_;
       Node current_node_;
   };
   
   class AntColony{
   public:
     AntColony(int n_ants = 10, double alpha = 0.5, double beta = 0.5, double evap_rate = 0.5, int iterations = 10, double Q = 10.0);
   
       void PrintAntPath(Ant& ant);
   
       void RemoveLoop(Ant& ant);
   
     std::vector<Node> ant_colony(std::vector<std::vector<int>>& grid, Node start, Node goal);
   private:
       std::vector<std::vector<int>> grid_;
       std::unordered_map<std::pair<int,int>,double, pair_hash> pheromone_edges_;
       int n_ants_, iterations_, max_steps_, grid_size_;
       double alpha_, beta_, evap_rate_, Q_;
       Node start_, goal_;
       std::vector<Ant> ants_;
       std::vector<Node> motions_;
   };
   
   #endif ANT_COLONY_H
