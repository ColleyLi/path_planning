
.. _program_listing_file_inc_utils.hpp:

Program Listing for File utils.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_inc_utils.hpp>` (``inc/utils.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef UTILS_H
   #define UTILS_H
   
   #include "main.hpp"
   
   #define BLACK "\x1b[1;30m"
   #define RED "\x1b[1;31m"
   #define GREEN "\x1b[1;32m"
   #define YELLOW "\x1b[1;33m"
   #define BLUE "\x1b[1;34m"
   #define MAGENTA "\x1b[1;35m"
   #define CYAN "\x1b[1;36m"
   #define WHITE "\x1b[1;37m"
   #define RESET "\x1b[1;0m"
   
   class Node{
   // Variables used here are constantly accessed and checked; leaving public for now.
   public:
     int x_;
     int y_;
     int id_;
     int pid_;
     double cost_;
     double h_cost_;
   
     Node(int x = 0, int y = 0, double cost = 0, double h_cost = 0, int id = 0, int pid = 0);
   
     void PrintStatus();
   
     Node operator+(Node p);
   
     Node operator-(Node p);
   
     void operator=(Node p);
   
     bool operator==(Node p);
   
     bool operator!=(Node p);
   };
   
   struct compare_cost{
   
     bool operator()(Node& p1, Node& p2);
   };
   
   std::vector<Node> GetMotion();
   
   void PrintGrid(std::vector<std::vector<int>> &grid);
   
   void PrintPath(std::vector<Node> path_vector, Node start_, Node goal_, std::vector<std::vector<int>> &grid);
   
   void PrintCost(std::vector<std::vector<int>> &grid, std::vector<Node> point_list);
   
   void MakeGrid(std::vector<std::vector<int>> &grid);
   void PrintPathInOrder(std::vector<Node>& path_vector, Node start, Node goal,std::vector<std::vector<int>>& grid);
   
   #endif UTILS_H
